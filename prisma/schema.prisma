// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  user_name     String
  email         String      @unique
  profile_image String?
  role_id       Int
  created_at    DateTime    @default(now())
  role          Role        @relation(fields: [role_id], references: [id])
  boards        Board[]     @relation("UserBoards")
  cards         Card[]      @relation("UserCards")
  comments      Comment[]
  user_cards     UserCard[]
  histories     History[]
  Invitated     Invitated[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model ListCard {
  id         Int       @id @default(autoincrement())
  title      String
  color      String
  userCreate String
  position   Int
  created_at DateTime  @default(now())
  due_date   DateTime?
  board_id   Int
  state_id   Int
  board      Board     @relation(fields: [board_id], references: [id])
  state      State     @relation(fields: [state_id], references: [id])
  cards      Card[]
  histories  History[]
}

model State {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  list_cards ListCard[]
}

model Board {
  id          Int        @id @default(autoincrement())
  title       String
  color       String
  state       String
  favorite    Boolean
  description String?
  created_at  DateTime   @default(now())
  modified_at DateTime?
  user_id     Int
  user        User       @relation(fields: [user_id], references: [id], name: "UserBoards")
  lists       ListCard[]
}

model Card {
  id            Int          @id @default(autoincrement())
  title         String
  description   String
  profile_image String?
  state         String
  due_date      DateTime?
  created_at    DateTime     @default(now())
  updated_at    DateTime?
  list_card_id  Int
  list_card     ListCard     @relation(fields: [list_card_id], references: [id])
  attachments   Attachment[]
  comments      Comment[]
  users         User[]       @relation("UserCards")
  histories     History[]
  userCards     UserCard[]
}

model Comment {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  profile_image String?
  state         String
  created_at    DateTime  @default(now())
  modified_at   DateTime?
  card_id       Int
  card          Card      @relation(fields: [card_id], references: [id])
  user_id       Int
  user          User      @relation(fields: [user_id], references: [id])
}

model Attachment {
  id         Int      @id @default(autoincrement())
  file       String
  type       String?
  created_at DateTime @default(now())
  card_id    Int
  card       Card     @relation(fields: [card_id], references: [id])
}

model History {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  description String
  user_id     Int
  card_id     Int?
  listCard_id Int?
  user        User      @relation(fields: [user_id], references: [id])
  card        Card?     @relation(fields: [card_id], references: [id])
  listCard    ListCard? @relation(fields: [listCard_id], references: [id])
}

model UserCard {
  id      Int  @id @default(autoincrement())
  user_id Int
  card_id Int
  user    User @relation(fields: [user_id], references: [id])
  card    Card @relation(fields: [card_id], references: [id])
  @@unique([user_id, card_id])
}

model Invitated {
  id          Int   @id @default(autoincrement())
  email       Int
  user_create Int
  user        User? @relation(fields: [user_create], references: [id])
}
